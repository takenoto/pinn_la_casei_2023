import numpy as np
import tkinter
import matplotlib.pyplot as plt
from scipy.interpolate import interp1d, pchip_interpolate

data_cstr_mbs_test13 = [
    #mb20 - layers 3, 6, 12
    [1166.5561981, 3.1299548149108887, 2.7957827946269975, 53.55543081465584, 420.3809034782482, 7.605647636787937, 484.33776472431896],
    [2524.2211946999996, 14.772445678710938, 1.6886525036201216, 4.528190475946858, 6.60516229866271, 0.04662014584117578, 12.868625424070865],
    [2926.8532747 , 0.0038529864978045225, 6.6326111599908595, 28.401439165107625, 36.02103647094642, 0.07938752781939089, 71.1344743238643],
    #mb100 - layers 3, 6, 12
    [3556.9480389, 4.4838361740112305, 26.740501292060454, 142.37541974289442, 2.647826422224827, 8.534398902790592, 180.2981463599703],
    [1552.9820059000012 , 2.1585257053375244, 17.355863617371163, 84.21571877105255, 2.5070156031496826, 8.998566610949085, 113.07716460252247],
    [3314.412362099998 , 8.489331245422363, 4.562552303583063, 29.8272801866454, 24.554650775376214, 9.826105737027373, 68.77058900263205],
    #mb1000 - layers 3, 6, 12
    [526.9628766000001 , 1.8890924453735352, 3.0552060269481314, 25.410719878755224, 89.1446426878206, 8.949064423726842, 126.5596330172508],
    [1260.1264307, 2.455801010131836, 2.960690975757882, 29.945365036807676, 148.62777845857866, 8.58959108872895, 190.12342555987317],
    [2255.7795591 , 0.003942422568798065, 0.9327164870953498, 5.9746177333216215, 5.535709336109929, 0.07843515807144864, 12.521478714598349]
    ]

def scatter3d():
    # X = [1,2,3]
    # Y = [1,2,3]
    # Z = [1,2,3]

    LAYERS = [3, 6, 12]
    mb_size = [20, 100, 1000]
    X = []
    Y = []
    for layer in LAYERS:
        for mb in mb_size:
            X.append(layer)
            Y.append(mb)
    
    Z = [row[-1] for row in data_cstr_mbs_test13]

    fig = plt.figure(figsize=(10, 10))
    ax = fig.add_subplot(projection='3d')
    ax.view_init(elev=15, azim=-225)
    labels = ['4HL', '6HL', '12HL']
    l = 0
    for i in range(0, len(data_cstr_mbs_test13[0]), 3):
        xx = np.array(X[i:i+3])
        yy = np.array(Y[i:i+3])
        zz = np.array(Z[i:i+3])
        ax.scatter(xx, yy, zz, linewidths=7, marker='H', label=labels[l]) #, '-b',
        f = interp1d(yy, zz, kind='quadratic') #Para interpolar valores...
        yy_new = np.linspace(yy.min(), yy.max(),25)
        zz_smooth=f(yy_new)
        zz_smooth=pchip_interpolate(yy, zz, yy_new)
        ax.plot(np.ones(len(yy_new))*xx[0], yy_new, zz_smooth)
        l+=1
    # ax.plot(neurons_nd, layers_nd, error_X_nondimt)
    
    
    
    ax.set_xlabel('HL')
    ax.set_ylabel('mb') #Layers
    ax.set_zlabel('MAD total')
    ax.legend()
    ax.view_init(elev=15, azim=45)
    plt.show()


    
    #X é neuron, Y é layer e Z é a coisa de interesse, geralmente erro
    
    # Agora um scatter comparando o fixed neurons, 45, 22 que são todos 300p e 30k adam
    # são os cstr 1, 2, 4
    # Aí o 45v2 faço com uma legenda separada
    
    #fixed neurons
    fixed_n_720_loss = [0.86069, 1.33021, 0.34731, 0.0005693777793, 0.164978683]
    fixed_n_720_neurons = [360, 180, 120, 90, 72]
    fixed_n_360_loss = [2.791541, 4.61524248, 0.6633014679,  1.54957,0.35436847]
    fixed_n_360_neurons = [180, 90, 60, 45,36]
    fixed_n_180_loss = [66.87656403, 21.0005188, 1.501811504, 1.939303875, 0.2380451709]
    fixed_n_180_neurons = [90, 45, 30, 23, 18]
    
    # Daqui pra baixo tirar o último, que é 12...
    # Na verdade só vou usar o 2, 4, 6, 8, 10
    # posição 0, 2, 4, 6, 8 no vetor
    # 22
    LAYERS = [2, 3, 4, 5, 6, 7, 8, 9, 10, 12]

    train_time_cstr_22n = [
        36.4156264,
        44.053218699999995,
        53.238731,
        99.2163227,
        71.9093547,
        103.82783119999999,
        126.25238549999995,
        146.48552860000007,
        215.46625899999992,
        260.2827042,
        ]

    loss_test_cstr_22n = [
        4.427249431610107,
        0.740986704826355,
        11.402397155761719,
        95.80989837646484,
        724.4971313476562,
        3.7639753818511963,
        16.902467727661133,
        343.4693603515625,
        3.2750089168548584,
        1.4421303272247314,
        ]

    loss_train_cstr_22n = [
        2.3576736450195312,
        1.1091535270679742e-05,
        1.9193171262741089,
        1.5963807106018066,
        726.2383422851562,
        7.743979949736968e-06,
        1.940328598022461,
        342.10406494140625,
        1.2240444421768188,
        8.098191261291504,
        ]

    pred_time_cstr_22n = [
        1.685581099999581,
        1.6794006000000081,
        1.544429300000047,
        1.5203108999994583,
        1.465453000000707,
        1.4550033999994412,
        1.5365135000001828,
        1.421445500000118,
        1.3605930000003355,
        1.3240338000005067,
        ]
    # 45
    train_time_45n1_cstr = [
        56.0435198,
        66.9347349,
        195.51296599999998,
        113.66225860000003,
        149.06043440000008,
        218.56975779999993,
        306.0965894000001,
        387.18916190000004,
        452.24990779999985,
        553.1899666999998,
    ]

    loss_test_45n1_cstr = [
        6.193398475646973,
        151.7226104736328,
        1099758.75,
        7.951786518096924,
        1.263537049293518,
        1.3099080324172974,
        3.6399946212768555,
        1.512863278388977,
        0.35395246744155884,
        1.8898757696151733,
    ]

    loss_train_45n1_cstr = [
        2.122402838722337e-05,
        1.551840901374817,
        0.993739664554596,
        1.5850892066955566,
        4.8436439101351425e-05,
        1.0898254004132468e-05,
        1.5317295789718628,
        1.480864405632019,
        0.00027676590252667665,
        5.519396836461965e-06
    ]

    pred_time_45n1_cstr = [
        1.5758249999998952,
        1.572584800000186 ,
        1.529625400000441 ,
        1.5477164999992965 ,
        1.5089352000013605 ,
        1.500428199999078 ,
        1.5076460000000225 ,
        1.4525483999987046 ,
        1.4109416999999667 ,
        1.413048099999287 ,
    ]
    # 70
   
    #0, 2, 4, 6, 8 no vetor
   
    def getItems(list):
        "Retorna apenas os itens pra esse período"
        return list[0:1] + list[2:3] + list[4:5] + list[6:7] + list[8:9]
    
    # ax.plot(fixed_n_720_neurons, getItems(LAYERS), fixed_n_720_loss,) #label="720n" '-g'
    # ax.plot(fixed_n_360_neurons, getItems(LAYERS), fixed_n_360_loss,) 
    # ax.plot(fixed_n_180_neurons, getItems(LAYERS), fixed_n_180_loss,) 
    # ax.plot(22*np.ones(len(getItems(loss_test_cstr_22n))), getItems(LAYERS), getItems(loss_test_cstr_22n),) 
    # ax.plot(45*np.ones(len(getItems(loss_test_45n1_cstr))), getItems(LAYERS), getItems(loss_test_45n1_cstr),) 
    ax.plot(fixed_n_720_neurons, getItems(LAYERS), np.log(fixed_n_720_loss), label='720n') #label="720n" '-g'
    ax.plot(fixed_n_360_neurons, getItems(LAYERS), np.log(fixed_n_360_loss), label='360n') 
    ax.plot(fixed_n_180_neurons, getItems(LAYERS), np.log(fixed_n_180_loss), label='180n') 
    ax.plot(22*np.ones(len(getItems(loss_test_cstr_22n))), getItems(LAYERS), np.log(getItems(loss_test_cstr_22n)), label='NL=22')
    ax.plot(45*np.ones(len(getItems(loss_test_45n1_cstr))), getItems(LAYERS), np.log(getItems(loss_test_45n1_cstr)), label= 'NL=45' )


    # ax.scatter(neurons, layers_normal, error_V_normalv2, '-b', label="Normal v2")
    # ax.plot(neurons_nd, layers_nd, error_X_nondimt)
    ax.set_xlabel('NL') #NL
    ax.set_ylabel('Layers') #Layers
    ax.set_zlabel('loss')
    ax.legend()
    ax.view_init(elev=5, azim=45)
    plt.show()
    return

# Na ordem: Train time, loss test, loss train, pred time
inputs_Errors_fb19 = [
    # 22 n
    [58.8128782,  569.9669189453125, 579.9757080078125, 2.659450099999958 ],
    [111.61363649999998 , 11.344789505004883, 11.779792785644531, 2.5819068999990122 ],
    [145.80844559999997 , 1111.560302734375, 1106.7099609375, 2.5886988999991445 ],
    [383.5789618 , 1.382200837135315, 1.6411640644073486, 2.552982199998951 ],
    # 45 n
    [162.4917206 , 292.05682373046875, 299.42193603515625, 2.539755600002536 ],
    [585.6275482000001 , 7286.92626953125, 0.04867272451519966, 2.5322866999995313 ],
    [817.4569741999999 , 124.34159851074219, 0.00333623425103724, 2.5285031000021263 ],
    [1104.5419877 , 1168392.25, 0.014998970553278923, 2.4523754000001645 ],
    # 70 n
    [1100.3043047000006 , 9.969425201416016, 9.969902992248535, 2.3698057000001427 ],
    [1404.0644581000006 , 1238.673095703125, 1238.673095703125, 2.3880142999987584 ],
    [2856.729902700001 , 4.417751312255859, 4.076262474060059, 2.358090199999424 ],
    [5972.7171853 , 166.584716796875, 0.012669553980231285, 3.8071376999978384 ],
    # 90 n
    [296.4516871 , 10.44308853149414, 11.000697135925293, 7.208041400001093 ],
    [823.0577078000001 , 9209.796875 , 0.006554442923516035, 8.935609099993599 ],
    [565.9772324 , 259.90789794921875, 266.8900146484375, 14.478793499998574 ],
    [2303.3040287000003 , 6.351971626281738, 6.586510181427002, 21.183294100002968 ],
    # 130 n
    [1512.4621236000003 , 10.404671669006348, 11.057262420654297, 28.34676059999765 ],
    [3227.4608478 , 8553.6298828125, 0.05639459937810898, 28.98164330000145 ],
    [5855.2080188 , 813618.4375, 0.003373333951458335, 39.65539739999804 ],
    [6217.019047200001 , 0.3481586277484894, 0.3619851768016815, 59.73354169999948 ],
    # 200 n
    [486.0790434999981 , 462.31890869140625, 468.2478332519531, 56.5327316000039 , ],
    [2924.8046963999986 , 1149.7147216796875, 1146.758056640625, 43.88444320000417 ],
    [8746.3654398 , 7.353694915771484, 4.525576114654541, 19.930333000003884 ],
    [14242.339489700003 , 31.09788703918457, 0.02044006437063217, 4.171361399996385 ],
]

# O T é de total. São listados os erros na ordem x, p , s, v e total
error_XPSVT_fb19 = [
    # 22 n 
    [1.8570074682721915, 16.044133332700856, 11.289354219520556, 3.3827242437878926, 32.57321926428149],
    [14.292506107992658, 49.435231172399014, 22.31638963809871, 16.518543236255653, 102.56267015474603],
    [1.180400049584609, 17.883160337464336, 11.882147231185478, 6.1205088398869, 37.066216458121325],
    [5.938085258609786, 16.03127952997254, 133.55660689171893, 1.353231333196176, 156.87920301349743],
    # 45 n
    [3.0293061840467304, 8.764876715497481, 10.764609742698925, 7.91364760637282, 30.472440248615953],
    [1.121916000675633, 49.892223455911086, 212.99894718211, 0.9058532569144134, 264.9189398956111],
    [0.7336044109482391, 42.04487687945882, 161.75183030360049, 1.0319999405162579, 205.56231153452381],
    [32.351050721413614, 53.78372707669307, 179.11662786301713, 220.6789215087891, 485.93032716991297],
    # 70 n
    [19.786739171154025, 66.85362526114415, 22.753977931651097, 14.714717261157936, 124.1090596251072],
    [8.856721159226435, 15.9913011520667, 7.641994356887981, 14.956255388259894, 47.446272056441],
    [14.44516901779843, 63.9333861630721, 21.602828175755963, 15.78703236982227, 115.76841572644877],
    [5.505780606908726, 34.398157463078896, 206.7064963888437, 1.0371883806586393, 247.64762283948997],
    # 90 n
    [15.604671538404357, 52.779160748080685, 22.605587334546076, 16.143274409472948, 107.13269403050407],
    [2.8785564988485994, 55.75260071103145, 281.54551141556857, 40.360330972671484, 380.5369995981201],
    [None, None, None, None, None],
    [17.19242291004134, 64.30707986171674, 22.165262725266448, 15.398803712576639, 119.06356920960117,],
    # 130 n
    [16.071219825155268, 54.67202308903763, 22.564353387269012, 15.84222290910781, 109.14981921056972],
    [5.992765238046595, 47.95252638403944, 276.4577264262116, 0.9512108482793105, 331.3542288965769],
    [4.244964212240658, 47.87750685692352, 234.02732575934243, 1.0266336877479492, 287.1764305162546],
    [0.3047200181205411, 5.050753467132332, 24.45194701300868, 1.0997334066033235, 30.907153904864877],
    # 200 n
    [None, None, None, None, None],
    [5.199045826799407, 16.0061690645976, 24.512216183575607, 11.544790226817147, 57.26222130178976],
    [51.67965840936378, 128.66180518801642, 138.87537491026768, 74.63646884918215, 393.85330735683004],
    [6.142811203539322, 41.147774144317744, 243.9775288710719, 0.9748590967804321, 292.24297331570943]

]

def new2d():
    LAYERS = [4,6,8]
    X = LAYERS

    fig, ax1 = plt.subplots(figsize=(8, 2.5))
    
    is_log = True
    log_txt = ''
    if(is_log):
        log_txt = 'log'
    
    loss_test_sgd128_fb = [0.43363016843795776, 0.043340034782886505 , 0.3038129508495331]
    loss_test_adam128_fb = [136.8865966796875, 542.7206420898438, 526.0470581054688]
    ax1.plot(X, loss_test_sgd128_fb, '-b', label="SGD", linewidth=2)
    ax1.plot(X, loss_test_adam128_fb, '--y', label="Adam", linewidth=2)


    ax1.legend(loc='upper center')
    if is_log:
        ax1.set_yscale('log')
    ax1.set_ylabel(f'Loss')
    ax1.set_xlabel("HL")
    plt.legend()
    plt.show()

def main():
    return scatter3d()
    return new2d();

    # TODO plotar as variáveis por N e ao longo de Layers, 1 a 1
    # titles = ['TRT (s)',  'Loss (test)', 'Loss (train)', 'PRT (s)']
    loss_test22ntanh = [
        0.0027981088496744633,
        8.846916171023622e-05,
        4.8707708629081026e-05,
        25.611042022705078,
        36.508365631103516,
        41.26593017578125,
        0.001502437167800963,
        0.3273018002510071,
        0.2839580178260803,
        0.00019052563584409654
        ] 
    loss_test22nswish = [
        0.3401722013950348,
        0.0027448751498013735,
        0.2939959168434143,
        454.48175048828125,
        0.0005176130216568708,
        0.28976768255233765,
        0.0032269288785755634,
        0.001112676691263914,
        0.0004603017005138099,
        0.0013239328982308507
    ]
    loss_test22nselu = [
        466.7477111816406,
        0.31577935814857483,
        0.3615525960922241,
        36.85348892211914,
        0.8302363157272339,
        0.30722880363464355,
        0.48904141783714294,
        1.4120228290557861,
        1.902378797531128,
        0.741093635559082
    ]

    LAYERS = [2,3,4,5,6,8,8,9,10,12]
    # loss_test = [
    #     [tanh for i in loss_test22ntanh],

    #     [loss_test22ntanh[i] for i in ]
    #     # loss_test22nswish,
    #     # loss_test22nselu,
    # ] for i in range(len(LAYERS))

    loss_test = [ ]
    for t in loss_test22ntanh:
        loss_test.append([t])
    for s in loss_test22nswish:
        loss_test.append([s])
    for s in loss_test22nselu:
        loss_test.append([s])

    # titles = ['tanh', 'swish', 'SELU']
    titles = ['Loss (test)']

    for t in range(len(titles)):
        title = titles[t]
        Z = []
        nl_list_size = 10 # a cada quantos vai "quebrar" os dados em lista
        index_of_variable = t # index da variável de interesse. Train time = 0
        # como são 4 neurônios e separei por neurônio é a cada 4
        # inputs_Errors_fb19
        for i in range(len(loss_test)):
            if i%nl_list_size == 0:
                # Cria uma lista vazia
                Z.append([])
            # val = np.log(inputs_Errors_fb19[i][index_of_variable])
            val = loss_test[i][index_of_variable]
            if val is not None:
                val = val
            # O primeiro item é o train time... vamos testar
            Z[-1].append(val)
        
        
        X = LAYERS

        fig, ax1 = plt.subplots(figsize=(8, 8))
        
        is_log = False
        log_txt = ''
        if(is_log):
            log_txt = 'log'
        
        ax1.plot(X, Z[0], '-b', label="tanh", linewidth=2)
        ax1.plot(X, Z[1], '--y', label="swish", linewidth=2)
        ax1.plot(X, Z[2], '--r', label="SELU", linewidth=2)


        ax1.legend(loc='upper center')
        if is_log:
            ax1.set_yscale('log')
        ax1.set_ylabel(f'{log_txt} {title}')
        ax1.set_xlabel("layers")
        plt.legend()
        plt.show()


if __name__ == "__main__":
    main()
