def change_layer_fix_neurons_number(eq_params, process_params):
    func = 'tanh'
    #Tenh o nondim de 180x4 no teste anterior, j√°
    dictionary = { 
        f'180x4 {func}':{
            'layer_size': [1] + [180] * 4 + [4],
        },
        # f'180x6 {func}':{
        #     'layer_size': [1] + [180] * 6 + [4],
        # },
        # f'180x10 {func}':{
        #     'layer_size': [1] + [180] * 10 + [4],
        # },
        f'180x4 {func} mb50':{
            'layer_size': [1] + [180] * 4 + [4],
            'mini-batch':50
        },
        # f'180x6 {func} mb50':{
        #     'layer_size': [1] + [180] * 6 + [4],
        #     'mini-batch':50
        # },
        # f'180x10 {func} mb50':{
        #     'layer_size': [1] + [180] * 10 + [4],
        #     'mini-batch':50
        # },
        f'180x4 {func} nondim':{
            'layer_size': [1] + [180] * 4 + [4],
            'X_S': eq_params.Xm,
            "P_s": eq_params.Pm,
            "S_s":eq_params.So,
            "V_s": process_params.max_reactor_volume
        },
        # f'180x6 {func} nondim':{
        #     'layer_size': [1] + [180] * 6 + [4],
        #     'X_S': eq_params.Xm,
        #     "P_s": eq_params.Pm,
        #     "S_s":eq_params.So,
        #     "V_s": process_params.max_reactor_volume
        # },
        # f'180x10 {func} nondim':{
        #     'layer_size': [1] + [180] * 10 + [4],
        #     'X_S': eq_params.Xm,
        #     "P_s": eq_params.Pm,
        #     "S_s":eq_params.So,
        #     "V_s": process_params.max_reactor_volume
        # },
    }


    for key in dictionary:
        dictionary[key]["adam_epochs"] = 45000
        dictionary[key]['activation'] = func
        dictionary[key]['num_domain'] = 2500#10000
        dictionary[key]['num_test'] = 2500#10000
        dictionary[key]["lbfgs_pre"] = False
        dictionary[key]["lbfgs_post"] = True

    return dictionary